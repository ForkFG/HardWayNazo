{"version":3,"sources":["main.js"],"names":["NUMBER","require","charCodeAt","cryptojs","qs","lv","decode","location","prompt","debug","path","PLUS","title","$title","JSON","$main","SLASH_URL_SAFE","$hint","$note","$play","code","replace","UPPER","out","LOWER","n","text","c","tmp","Error","len","b64","length","placeHolders","l","charAt","arr","Arr","i","s","$l","html","L","v","j","push","b","setTimeout","exports","fromByteArray","uint8","t","temp","num","output","encode","o","extraBytes","f","words","crypto","$body","$in","appendTo","2","jump","base64"],"mappings":"2hBACCA,EAAKC,IAAQC,WADd,GAEAC,EAAQ,IAAGF,WAAQ,GACnBG,EAAOH,IAAQC,WAHf,G,oBAKIG,EAAkB,IAAAH,WAAtB,GAEA,SACKI,EAAGC,GACRC,EAASC,EAAAA,WAAc,GAFvB,OAGAC,IAAIC,GAVJC,IACMX,EAcD,GAVLY,IAASC,GAYTC,IAASC,EAQTC,GAXAC,EAYKlB,GACLmB,E,OAGOC,EAAApB,EAAA,GAAA,GAAAoB,EADPC,EAAA,GAAAD,EAAAE,EAKCC,EAAIC,EAAJD,GADgBE,EAEoBpB,EAAAA,QANrC,E,cAKc,SACLqB,GAFQ,IAAAC,EAAAC,E,gBACH,MAAA,IAAAC,MAAA,kDAKZ,IAAAC,EANeC,EAAAC,OAAAC,EAAAC,MAAAH,EAAAI,OAAAL,EAAA,GAAA,EAAA,MAAAC,EAAAI,OAAAL,EAAA,GAAA,EAAA,EASfM,EAAA,IAAAC,EAAA,EAAAN,EAAAC,OAAA,EATeM,GAAAJ,EAIPA,EAJOD,EAAAF,EAAAC,OAAA,EAAAD,EAAAC,OAMfO,EAAAA,EAWEC,SAAAA,EAAGC,GARLL,EAAAM,KAAAC,EATe,IAAAL,EAAA,EAAAA,EAAAJ,EAAAA,GAAAF,EAAAY,EAAAC,GAAA,UAAAjB,EAAAtB,EAAAgC,EAAAH,OAAAG,KAAA,GAAAhC,EAAAyB,EAAAI,OAAAG,EAAA,KAAA,GAAAhC,EAAAyB,EAAAI,OAAAG,EAAA,KAAA,EAAAhC,EAAAyB,EAAAI,OAAAG,EAAA,OAAA,IASfO,GAAA,MAAAjB,IAAA,GARYiB,EAAA,IAAAjB,GAaTkB,OAXJ,GAAAb,EAFaY,EAAA,KASyBE,EAAAA,EAAAA,EAAAA,OAAAA,KAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,KAAAA,IATzB,GAAAd,IAAAY,GAAAjB,EAAAtB,EAAAyB,EAAAI,OAAAG,KAAA,GAAAhC,EAAAyB,EAAAI,OAAAG,EAAA,KAAA,EAAAhC,EAAAyB,EAAAI,OAAAG,EAAA,KAAA,IAAA,EAAA,KAAAO,EAAA,IAAAjB,IAcTW,GA8FJS,EAAKC,cA3FF,SAAEC,GATJ,IAAAC,EACCC,EAAApB,EAVcqB,E,aA6BhBC,EAAI,GAnBF,SAAAC,EAAAF,G,mFANFG,IAAAlB,EAAAxB,EAAAkB,EAAAkB,EAAAlB,OAAAyB,EAAAnB,EAAAN,EAAAM,GAAA,EAAiBc,GAgBhBF,EAAAZ,IAAA,KAAAY,EAAAZ,EAAA,IAAA,GAAAY,EAAAZ,EAAA,GApBeoB,GAAAC,GAAAN,EAAAD,IAAA,GAAA,IAAAG,EAAAF,GAAA,GAAA,IAAAE,EAAAF,GAAA,EAAA,IAAAE,EAAA,GAAAF,GAAAhD,OAAAoD,GAAApD,KAAA,EA6BhBiD,GALAC,GA5BDH,EAAAF,EAAAA,EAAAlB,OAAA,KA4BI3B,GADJiD,GAAAC,EAAAH,GAAA,EAAA,IAyBCE,GAAA,KArBDjD,MACCA,KAAAuD,EACAN,GAAAC,GAsBCH,GAAAF,EAAAA,EAAAlB,OAAA,IAAA,GAAAkB,EAAAA,EAAAlB,OAAA,KAtBD,I,cACC6B,GAAAN,EAAAH,GAAA,EAAA,IAwEEE,GAAQrC,IAIZ,OAAQZ,G,MAIO,IAAPyD,EAAqBC,KAAS5C,SAAxB,GAAZ6B,IACA,IAAAgB,EAAMC,CAAAA,SAAOhE,EAAPgE,EAAYjB,GALpB,IAAAkB,EAAAjE,EAAA","file":"bundle.js","sourcesContent":["const\n$\t\t\t= require(\"jquery\"),\ncryptojs\t= require(\"crypto-js\"),\nqs\t\t\t= require(\"qs\")\n\nlet lv\t= JSON.parse($(\"nazo\").text()) // Note: Get rid of comments.\n\nconst\ndebug\t= location.hostname == \"localhost\",\nprompt\t= debug ? \"%\" : \"#\",\npath\t= location.pathname.slice(debug ? 1 : 13)\n\t.replace(/\\..+?$/, \"\") ?? \"index\",\ntitle\t= lv.id + prompt + \" \" + path\n\nconst\n$body\t= $(\"body\"),\n$title\t= $(`<title>${title} | HardWayNazo</title>`).appendTo($(\"head\")),\n$main\t= $(`\n<main>\n\t<h1>${title}</h1>\n\t<p class=\"hint\"></p>\n\t<p class=\"note\"></p>\n\t<p class=\"play\"></p>\n</main>\n`).appendTo($body),\n$hint\t= $(\".hint\"),\n$note\t= $(\".note\"),\n$play\t= $(\".play\")\n\nconst\nesc = s => s\n\t.replace(/ /g, \"&nbsp;\")\n\t.replace(/\\*\\*(.*)\\*\\*/g, \"<b>$1</b>\"),\nout = (n, $t) => {\n\tif (! lv[n]) return\n\tconst { text: t, typewriter: tw } = lv[n]\n\tlet c = 0, b = 0\n\tfor (let l of t) {\n\t\tl += \" \"\n\t\tlet m = l[0] == \"!\",\n\t\t\t$l = $(m ? `<code></code>` : `<p></p>`).appendTo($t)\n\t\tif (m) l = l.slice(1)\n\t\tif (tw)\n\t\t\tfor (let i = 0; i < l.length; i ++) setTimeout(() => {\n\t\t\t\tlet s = $l.html()\n\t\t\t\tif (l.slice(i - 1, i + 1) == \"**\") b ++\n\t\t\t\telse if (b == 2) {\n\t\t\t\t\tb = 0\n\t\t\t\t\ts = esc(s)\n\t\t\t\t}\n\t\t\t\t$l.html(s + l[i])\n\t\t\t}, ++ c * tw)\n\t\telse $l.html(esc(l))\n\t}\n}\n\nconst\nc = lv.crypto ?? {},\nq = Object.entries(qs.parse(location.search.slice(1)))\n\nif (q.length) {\n\tconst t = c[q[0][0]]\n\tif (typeof t === \"string\") {\n\t\tlet f = true, d, o\n\t\ttry {\n\t\t\td = cryptojs.AES.decrypt(\n\t\t\t\tt, cryptojs.enc.Utf8.parse(q[0][1]),\n\t\t\t\t{ iv: { words: [ 0, 0, 0, 0 ], sigBytes: 16 } }\n\t\t\t).toString(cryptojs.enc.Utf8)\n\t\t\to = JSON.parse(d)\n\t\t}\n\t\tcatch {\n\t\t\tf = false\n\t\t}\n\t\tif (f) {\n\t\t\tlv = o\n\t\t\tlv.crypto = c\n\t\t}\n\t}\n\telse if (typeof t === \"object\") { \n\t// Note: Pass when `t === null`.\n\t// Debug: Directly access `.c_html` files.\n\t\tlv = t\n\t\tlv.crypto = c\n\t}\n}\n\n$body.append(`\n<style>\nh1 {\n\tfont-size: 70px;\n\ttext-align: center;\n}\np {\n\tfont-family: serif;\n}\ncode {\n\tdisplay: block;\n\tfont-family:\n\t\t'Fira Code', consolas,\n\t\t'Courier New', Courier, monospace;\n}\n.hint {\n\tfont-size: 26px !important;\n\ttext-align: ${ lv.hint.align ?? \"center\" };\n}\n.note {\n\tposition: fixed;\n\tbottom: 40px;\n\tright: 5px;\n\twidth: 100%;\n\n\tfont-size: 20px !important;\n\ttext-align: ${ lv.note?.align ?? \"right\" };\n}\n.play {\n\ttext-align: center;\n}\n.play input, .play button {\n\tmargin: 0 5px;\n\n\tbackground-color: white;\n\tfont-size: 30px;\n\ttext-align: center;\n\n\tborder: 2px solid black;\n\tborder-radius: 5px;\n\toutline: none;\n}\n.play input:focus, .play button:active, .play button:hover {\n\tborder-style: dashed;\n}\n</style>\n`)\n\nout(\"hint\", $hint)\nout(\"note\", $note)\n\nlet dft = lv.ascend.default ?? \"\"\nswitch (lv.ascend.method) {\n\tcase \"crypto\":\n\t\tdft += `?${ lv.ascend.token }=`\n\tcase \"input\":\n\t\tconst $in = $(`<input />`).appendTo($play).val(dft)\n\t\tconst jump = f => {\n\t\t\tif (f) location.href = (debug ? \"/\" : \"/HardWayNazo/\") + $in.val()\n\t\t}\n\t\tif (lv.ascend.answer) $in\n\t\t\t.on(\"input\", () => jump($in.val() == lv.ascend.answer))\n\t\telse $(`<button>Nazo!</button>`).appendTo($play)\n\t\t\t.on(\"click\", jump)\n\t\tbreak\n}\n\n"]}